/* Synchronous RAM test bench */

module SynchronousRAM_tb;

    parameter DATA_WIDTH = 8;
    parameter ADDR_WIDTH = 4;

    // Testbench signals
    reg clk;
    reg we;
    reg [ADDR_WIDTH-1:0] addr;
    reg [DATA_WIDTH-1:0] din;
    wire [DATA_WIDTH-1:0] dout;

    // Instantiate the RAM
    SynchronousRAM #(
        .DATA_WIDTH(DATA_WIDTH),
        .ADDR_WIDTH(ADDR_WIDTH)
    ) uut (
        .clk(clk),
        .we(we),
        .addr(addr),
        .din(din),
        .dout(dout)
    );

    // Clock generation
    always #5 clk = ~clk;

    // Test sequence
    initial begin
        // Initialize signals
        clk = 0;
        we = 0;
        addr = 0;
        din = 0;

        // Test writing to RAM
        #10 we = 1; addr = 4'd0; din = 8'hAA;  // Write 0xAA to address 0
        #10 we = 1; addr = 4'd1; din = 8'hBB;  // Write 0xBB to address 1
        #10 we = 1; addr = 4'd2; din = 8'hCC;  // Write 0xCC to address 2
        #10 we = 0;                            // Disable write

        // Test reading from RAM
        #10 addr = 4'd0;  // Read from address 0
        #10 addr = 4'd1;  // Read from address 1
        #10 addr = 4'd2;  // Read from address 2

        // Finish simulation
        #20 $finish;
    end

    // Monitor output
    initial begin
      $dumpvars(1);
      $dumpfile("dump.vcd");
        $monitor("Time=%0d, WE=%b, Addr=%d, DIN=%h, DOUT=%h", $time, we, addr, din, dout);
    end
endmodule
